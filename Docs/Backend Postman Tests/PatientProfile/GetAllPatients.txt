pm.test("Response status code is 200", function () {
    pm.response.to.have.status(200);
});


pm.test("Content-Type is application/json", function () {
    pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json");
});


pm.test("Response has the required fields", function () {
    const responseData = pm.response.json();

    pm.expect(responseData).to.be.an('array');
    responseData.forEach(function(patientProfile) {
        pm.expect(patientProfile).to.have.property('id');
        pm.expect(patientProfile).to.have.property('firstName');
        pm.expect(patientProfile).to.have.property('lastName');
        pm.expect(patientProfile).to.have.property('fullName');
        pm.expect(patientProfile).to.have.property('dateOfBirth');
        pm.expect(patientProfile).to.have.property('email');
        pm.expect(patientProfile).to.have.property('contactInformation');
        pm.expect(patientProfile).to.have.property('gender');
        pm.expect(patientProfile).to.have.property('emergencyContact');
        pm.expect(patientProfile).to.have.property('medicalRecordNumber');
        pm.expect(patientProfile).to.have.property('allergiesMedicalCond');
        pm.expect(patientProfile).to.have.property('appointmentHistory');
    });
});


pm.test("Response status code is 200", function () {
  pm.response.to.have.status(200);
});


pm.test("Content-Type is application/json", function () {
    pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json");
});


pm.test("Response has the required fields", function () {
  const responseData = pm.response.json();
  
  pm.expect(responseData).to.be.an('array');
  responseData.forEach(function(patient){
    pm.expect(patient).to.have.property('id');
    pm.expect(patient).to.have.property('firstName');
    pm.expect(patient).to.have.property('lastName');
    pm.expect(patient).to.have.property('fullName');
    pm.expect(patient).to.have.property('dateOfBirth');
    pm.expect(patient).to.have.property('email');
    pm.expect(patient).to.have.property('contactInformation');
    pm.expect(patient).to.have.property('gender');
    pm.expect(patient).to.have.property('emergencyContact');
    pm.expect(patient).to.have.property('medicalRecordNumber');
    pm.expect(patient).to.have.property('allergiesMedicalCond');
    pm.expect(patient).to.have.property('appointmentHistory');
  });
});


pm.test("Id property must be a non-empty string", function () {
  const responseData = pm.response.json();

  responseData.forEach(function(patient){
    pm.expect(patient.id).to.be.a('string').and.to.have.lengthOf.at.least(1, "Id should not be empty");
  });
});


pm.test("Contact information, gender, and emergency contact are non-negative numbers", function () {
  const responseData = pm.response.json();
  
  pm.expect(responseData).to.be.an('array');
  
  responseData.forEach(function(patient){
    pm.expect(patient.contactInformation).to.be.a('number').and.to.be.at.least(0);
    pm.expect(patient.gender).to.be.a('number').and.to.be.at.least(0);
    pm.expect(patient.emergencyContact).to.be.a('number').and.to.be.at.least(0);
  });
});


pm.test("AllergiesMedicalCond field must be present in the response", function () {
  const responseData = pm.response.json();
  
  responseData.forEach(function(patient){
    pm.expect(patient).to.have.property('allergiesMedicalCond');
  });
});


pm.test("Absence of 'allergiesMedicalCond' field in the response body", function () {
    const responseData = pm.response.json();
    
    responseData.forEach(function(patient){
        pm.expect(patient.allergiesMedicalCond).to.not.exist;
    });
});


pm.test("Presence of specific value in the response body", function () {
    const responseData = pm.response.json();
    
    responseData.forEach(function(patient){
        pm.expect(patient.id).to.exist;
    });
});


pm.test("Medical record number should not be empty", function () {
  const responseData = pm.response.json();
  
  responseData.forEach(function(patient){
    pm.expect(patient.medicalRecordNumber).to.exist.and.to.have.lengthOf.at.least(1, "Medical record number should not be empty");
  });
});


pm.test("Verify gender field is either 0 for male or 1 for female", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData).to.be.an('array');
    responseData.forEach(function(patient){
        pm.expect(patient.gender).to.satisfy(function (gender) {
            return gender === 0 || gender === 1;
        }, "Gender field must be either 0 for male or 1 for female");
    });
});


pm.test("Absence of specific value in the response body", function () {
    const responseData = pm.response.json();
    
    responseData.forEach(function(patient){
        pm.expect(patient.id).to.not.equal(''); // Absence of id value
        pm.expect(patient.fullName).to.not.equal(''); // Absence of fullName value
        pm.expect(patient.dateOfBirth).to.not.equal(''); // Absence of dateOfBirth value
        pm.expect(patient.email).to.not.equal(''); // Absence of email value
        pm.expect(patient.medicalRecordNumber).to.not.equal(''); // Absence of medicalRecordNumber value
    });
});

// Test to check if the first name in the response body is a string
pm.test("First name in the response body is a string", function () {
    const responseData = pm.response.json();
    
    responseData.forEach(function(patient){
        pm.expect(patient.firstName).to.be.a('string');
    });
});
// Test to check if the last name in the response body is a string
pm.test("Last name in the response body is a string", function () {
    const responseData = pm.response.json();
    
    responseData.forEach(function(patient){
        pm.expect(patient.lastName).to.be.a('string');
    });
});
// Test to check if the full name in the response body is a string
pm.test("Full name in the response body is a string", function () {
    const responseData = pm.response.json();
    
    responseData.forEach(function(patient){
        pm.expect(patient.fullName).to.be.a('string');
    });
});