pm.test("Response status code is 201", function () {
    pm.response.to.have.status(201);
});


pm.test("Response has the required fields", function () {
    const responseData = pm.response.json();

    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData).to.have.property('id');
    pm.expect(responseData).to.have.property('firstName');
    pm.expect(responseData).to.have.property('lastName');
    pm.expect(responseData).to.have.property('fullName');
    pm.expect(responseData).to.have.property('dateOfBirth');
    pm.expect(responseData).to.have.property('email');
    pm.expect(responseData).to.have.property('contactInformation');
    pm.expect(responseData).to.have.property('gender');
    pm.expect(responseData).to.have.property('emergencyContact');
    pm.expect(responseData).to.have.property('medicalRecordNumber');
});

pm.test("Email is in a valid format", function () {
  const responseData = pm.response.json();
  
  pm.expect(responseData.email).to.be.a('string');
  pm.expect(responseData.email).to.match(/\S+@\S+\.\S+/);
});

pm.test("Response must have the required header 'Content-Type'", function () {
    pm.expect(pm.response.headers.get("Content-Type")).to.exist;
});


pm.test("Content-Type header is set to application/json", function () {
    pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json");
});


var responseData = pm.response.json();

// Test the response body structure and values
pm.test("Response body structure is valid", function () {
    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData).to.have.property('id');
    pm.expect(responseData).to.have.property('firstName');
    pm.expect(responseData).to.have.property('lastName');
    pm.expect(responseData).to.have.property('fullName');
    pm.expect(responseData).to.have.property('dateOfBirth');
    pm.expect(responseData).to.have.property('email');
    pm.expect(responseData).to.have.property('contactInformation');
    pm.expect(responseData).to.have.property('gender');
    pm.expect(responseData).to.have.property('emergencyContact');
    pm.expect(responseData).to.have.property('medicalRecordNumber');
    pm.expect(responseData).to.have.property('allergiesMedicalCond');
    pm.expect(responseData).to.have.property('appointmentHistory');
});

// Test for valid email format
pm.test("Email is in a valid format", function () {
    pm.expect(responseData.email).to.be.a('string');
    pm.expect(responseData.email).to.match(/\S+@\S+\.\S+/);
});

// Test for the presence of the 'Content-Type' header
pm.test("Response must have the required header 'Content-Type'", function () {
    pm.expect(pm.response.headers.get("Content-Type")).to.exist;
});

// Test that the 'Content-Type' header is set to application/json
pm.test("Content-Type header is set to application/json", function () {
    pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json");
});

pm.test("Response has the required field 'allergiesMedicalCond'", function () {
  const responseData = pm.response.json();
  
  pm.expect(responseData).to.have.property('allergiesMedicalCond');
});


pm.test("Response has the required field appointmentHistory", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData).to.have.property('appointmentHistory');
});


pm.test("ContactInformation is a non-negative integer", function () {
  const responseData = pm.response.json();
  
  pm.expect(responseData).to.be.an('object');
  pm.expect(responseData.contactInformation).to.be.a('number');
  pm.expect(responseData.contactInformation).to.be.at.least(0, "Value should be a non-negative integer");
});


pm.test("EmergencyContact is a non-negative integer", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData.emergencyContact).to.be.a('number');
    pm.expect(responseData.emergencyContact).to.be.at.least(0);
});


pm.test("MedicalRecordNumber is a non-empty string", function () {
  const responseData = pm.response.json();
  
  pm.expect(responseData.medicalRecordNumber).to.be.a('string').and.to.have.lengthOf.at.least(1, "Value should not be empty");
});


pm.test("Response has the required field 'id'", function () {
  const responseData = pm.response.json();
  pm.expect(responseData).to.have.property('id');
});


pm.test("Id is a unique identifier", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData.id).to.exist.and.to.be.a('string');
});


pm.test("Id is a non-empty string", function () {
    const responseData = pm.response.json();

    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, "Id should be a non-empty string");
});


pm.test("Id should not be null", function () {
  const responseData = pm.response.json();
  
  pm.expect(responseData.id).to.not.be.null;
});


pm.test("Response data contains the specific value for 'gender'", function () {
    const responseData = pm.response.json();

    pm.expect(responseData.gender).to.exist;
});

